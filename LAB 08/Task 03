#include<iostream>
using namespace std;

class Vector2d {
    int x, y;

public:
    Vector2d() : x(0), y(0) {}
    Vector2d(int x, int y) : x(x), y(y) {}

    Vector2d operator +(const Vector2d &obj) {
        return Vector2d(x + obj.x, y + obj.y);
    }

    Vector2d operator -(const Vector2d &obj) {
        return Vector2d(x - obj.x, y - obj.y);
    }

    Vector2d operator *(int scalar) {
        return Vector2d(scalar * x, scalar * y);
    }

    friend ostream& operator<<(ostream &os, const Vector2d &obj);
    friend Vector2d dotproduct(const Vector2d &a, const Vector2d &b);
};

ostream& operator<<(ostream &os, const Vector2d &obj) {
    os << "( " << obj.x << " , " << obj.y << " )";
    return os;
}

Vector2d dotproduct(const Vector2d &a, const Vector2d &b) {
    return Vector2d(a.x * b.x, a.y * b.y);
}

int main() {
    Vector2d v1(3, 4);
    Vector2d v2(4, 5);
    Vector2d v3 = v1 + v2;
    Vector2d v4 = v1 - v2;

    cout << v4 << endl;
    v4 = v4 * 5;
    cout << v4 << endl;

    cout << v3 << endl;

    Vector2d dp = dotproduct(v1, v2);
    cout << "Dot product (element-wise): " << dp << endl;

    return 0;
}
