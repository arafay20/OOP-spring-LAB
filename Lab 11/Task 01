#include <iostream>
#include <stdexcept>
#include <string>
using namespace std;


class DimensionMismatchException : public exception {
    string msg;

public:
    DimensionMismatchException(int r1, int c1, int r2, int c2) {
        msg = "DimensionMismatchException - Matrices must have same dimensions (" +
              to_string(r1) + "x" + to_string(c1) + " vs " + to_string(r2) + "x" + to_string(c2) + ")!";
    }

    const char* what() const noexcept override {
        return msg.c_str();
    }
};


template <typename T>
class Matrix {
    int rows, cols;
    T** data;

public:
    Matrix(int r, int c) : rows(r), cols(c) {
        data = new T*[rows];
        for (int i = 0; i < rows; ++i) {
            data[i] = new T[cols];
            for (int j = 0; j < cols; ++j) {
                data[i][j] = 0;  
            }
        }
    }

    ~Matrix() {
        for (int i = 0; i < rows; ++i) {
            delete[] data[i];
        }
        delete[] data;
    }

    void set(int i, int j, T value) {
        data[i][j] = value;
    }

    T get(int i, int j) const {
        return data[i][j];
    }

    Matrix add(const Matrix& other) {
        if (rows != other.rows || cols != other.cols) {
            throw DimensionMismatchException(rows, cols, other.rows, other.cols);
        }

        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] + other.data[i][j];
            }
        }
        return result;
    }

    void print() const {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                cout << data[i][j] << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    try {
       
        Matrix<int> A(2, 2);
        A.set(0, 0, 1); A.set(0, 1, 2);
        A.set(1, 0, 3); A.set(1, 1, 4);

        
        Matrix<int> B(3, 3);
        B.set(0, 0, 5); B.set(0, 1, 6); B.set(0, 2, 7);
        B.set(1, 0, 8); B.set(1, 1, 9); B.set(1, 2, 10);
        B.set(2, 0, 11); B.set(2, 1, 12); B.set(2, 2, 13);

        
        Matrix<int> C = A.add(B);
        C.print();
    }
    catch (const exception& e) {
        cout << e.what() << endl;
    }

    return 0;
}
