#include <iostream>
#include <exception>
using namespace std;

class NegativeStockException : public exception {
    
};

class OverCapacityException : public exception {
   
};

template <typename T>
class InventoryItem {
    T stock;
    const T MAX_STOCK = 100;
public:
    InventoryItem(T stock) : stock(stock) {}

    void check() {
        if (stock < 0) {
            throw NegativeStockException();
        } else if (stock > MAX_STOCK) {
            throw OverCapacityException();
        } else {
            cout << "Stock set successfully to " << stock << ".\n";
        }
    }
};

int main() {
    try {
        cout << "Attempting to set stock to -5...\n";
        InventoryItem<int> item1(-5);
        item1.check();
    } catch (const NegativeStockException& e) {
        cout << "Caught NegativeStockException - what(): " << e.what() << endl;
    } catch (const exception& e) {
        cout << "Caught std::exception - what(): " << e.what() << endl;
    }

    try {
        cout << "Attempting to set stock to 120 (max 100)...\n";
        InventoryItem<int> item2(120);
        item2.check();
    } catch (const OverCapacityException& e) {
        cout << "Caught OverCapacityException - what(): " << e.what() << endl;
    } catch (const exception& e) {
        cout << "Caught std::exception - what(): " << e.what() << endl;
    }

    return 0;
}
