#include <iostream>
#include <exception>
using namespace std;

class DatabaseException : public exception {
public:
    const char* what() const noexcept override {
        return "A database error occurred.";
    }
};

class ConnectionFailedException : public DatabaseException {
   
};

class QueryTimeoutException : public DatabaseException {
    
};

template<typename T>
class DatabaseConnector {
    T db;
public:
    DatabaseConnector(T db) : db(db) {}

    void connect() {
        cout << "Attempting to connect to " << db << "...\n";
        if (db == "invalid_db") {
            throw ConnectionFailedException();
        } else if (db == "slow_db") {
            throw QueryTimeoutException();
        }
        cout << "Connected successfully to " << db << ".\n";
    }
};

int main() {
    try {
        DatabaseConnector<string> conn1("invalid_db");
        conn1.connect();
    } catch (const ConnectionFailedException& e) {
        cout << "Caught ConnectionFailedException - what(): " << e.what() << endl;
    } catch (const DatabaseException& e) {
        cout << "Caught a general DatabaseException - what(): " << e.what() << endl;
    }

    try {
        DatabaseConnector<string> conn2("slow_db");
        conn2.connect();
    } catch (const ConnectionFailedException& e) {
        cout << "Caught ConnectionFailedException - what(): " << e.what() << endl;
    } catch (const DatabaseException& e) {
        cout << "Caught a general DatabaseException - what(): " << e.what() << endl;
    }

    return 0;
}
